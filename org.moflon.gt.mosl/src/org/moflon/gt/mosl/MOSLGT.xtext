grammar org.moflon.gt.mosl.MOSLGT with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate moslgt "http://www.moflon.org/gt/mosl/MOSLGT"

GraphTransformationFile:
	imports += Import*
	using += Using*	'#package' name = QualifiedName
	
	(eClasses += EClassDef | patterns += PatternDef)
	patterns += PatternDef*
	eClasses += EClassDef*
	
	
;

PatternDef:"#pattern" name=ID '(' (parameters += PatternParameters)? (',' parameters += PatternParameters)* ')' '{'
	objectVariables += ObjectVariablePattern*
	'}'
;

PatternParameters:ObjectVariableDefinition;

EClassDef:
	'#class' name = [ecore::EClass | QualifiedName] '{'
	operations += MethodDec*
	'}'
;

MethodDec:
	'#operation' name = ID '(' (parameters+=MethodParameter)? (',' parameters+=MethodParameter)* ')' ':' (type=[ecore::EClassifier | QualifiedName] | 'void') ('{'
		statements += Statement*
	'}')?
;

CalledPatternParameter:(definingOV=ObjectVariableDefinition) | (existingOV=[ObjectVariablePattern | QualifiedName]);

Statement: PatternStatement | ConditionContainingStatement| ObjectVariableDefinition | ReturnStatement;

PatternStatement:'#invoke' pattern=[PatternDef]'('(parameters+=CalledPatternParameter)? (',' parameters+=CalledPatternParameter)*')';

ConditionStatement:'#if' '(' cond=Condition ')''{'
	thenStmts += Statement+
	'}'
	('#else' '{'
		elseStmts += Statement+
	'}')?
;

Condition:pattern=[PatternDef] '('(parameters+=CalledPatternParameter)? (',' parameters+=CalledPatternParameter)*')';

ConditionContainingStatement:ConditionStatement | LoopStatement;

LoopStatement:DoLoopStatement | WhileLoopStatement| ForLoopStatement;

WhileLoopStatement: '#while''(' cond=Condition ')''{'
		loopStmts += Statement+
	'}'
;

DoLoopStatement: '#Do' '{'
	loopStmts += Statement+
	'}' '#while' '(' cond=Condition ')'
;

ForLoopStatement: '#For' '('
	pattern = Condition
	')''{'
		loopStmts += Statement*
	'}'
;

ReturnStatement:{ReturnStatement} "#return" (returnObject=[ObjectVariablePattern])?;

ObjectVariableDefinition:(op = Operator)? name = ID ':' type = [ecore::EClass | QualifiedName];

ObjectVariablePattern: ObjectVariableDefinition (":=" assignment=[ObjectVariablePattern | QualifiedName])? ('{' 
		attributeAssignments += AttributeAssignment*
		attributeConstraints += AttributeConstraint*
		linkVariablePatterns += LinkVariablePattern*	
'}')?	
;

AttributeConstraint:
	attribute = [ecore::EAttribute] op=('==' | '!=' | '<=' | '>=' | '>' | '<') valueExp = Expression
;

AttributeAssignment:
	attribute = [ecore::EAttribute] op=':=' valueExp = Expression
;

Expression:
	(LiteralExpression | AttributeExpression | EnumExpression)
;

EnumExpression:
	 'enum::' eenum=[ecore::EEnum | QualifiedName] '::' literal = [ecore::EEnumLiteral | QualifiedName]  
;

AttributeExpression:
	objectVar = [ObjectVariablePattern] '.' attribute = [ecore::EAttribute]
;

LiteralExpression:
	value = LiteralValue
;

LinkVariablePattern:
	(op = Operator)? '-' type = [ecore::EReference] '->' target = [ObjectVariablePattern]
;

MethodParameter: name = ID ':' type=[ecore::EClassifier | QualifiedName];

MethodTypeName returns ecore::EString: 'void' | QualifiedName;

Operator:
	value = OPERATOR_VALUE
;


/* ---------------- */
/*    Auxiliaries   */
/* ---------------- */



Import:
	'#import' name = STRING
;

Using:
	'#using' importedNamespace = QualifiedNameWithWildcard
;

terminal OPERATOR_VALUE: '++' | '!' | '--';

terminal DECIMAL: INT '.' INT;

LiteralValue:
	(STRING | ('-')?INT | ('-')?DECIMAL | BOOL)
;

terminal BOOL:
	'true' | 'false'
;

QualifiedNameWithWildcard:
	QualifiedName '.*'
;

QualifiedName returns ecore::EString:
	ID ('.' ID)*
;

